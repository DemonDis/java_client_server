package loader;

import java.io.*;
import java.util.concurrent.*;
import javax.json.*;

public class Metric {

    public static void main(String[] args) throws Exception {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞
        JsonObject config = loadConfig("./report/_conf.json");

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤
        FileWork fileWork = new FileWork();
        fileWork.doFile();  // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

        // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        JsonArray usersArray = config.getJsonArray("users");
        JsonArray requestsArray = config.getJsonArray("request");

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º ExecutorService –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        ExecutorService executorService = Executors.newFixedThreadPool(usersArray.size());

        try {
            // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            for (int i = 0; i < requestsArray.size(); i++) {
                JsonObject requestObject = requestsArray.getJsonObject(i);
                String requestType = requestObject.getString("request_type");
                String name = requestObject.getString("name");
                String maxTime = requestObject.getString("max_time");
                String requestBody = requestObject.getString("request_body");
                JsonNumber timeout = requestObject.getJsonNumber("timeout");

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                handleRequestsForUsers(usersArray, config, requestType, name, maxTime, requestBody, timeout, executorService);

                // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                System.out.println("üì¢ [TIMEOUT] " + timeout.longValue());
                TimeUnit.SECONDS.sleep(timeout.longValue());
            }

        } finally {
            // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É ExecutorService
            shutdownExecutor(executorService);
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ (–ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã)
        MetricXmlMainPage metricXmlMainPage = new MetricXmlMainPage();
        metricXmlMainPage.createPage();

        // –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        System.out.println("‚õî –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚õî");
        System.exit(0);  // –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    }

    private static JsonObject loadConfig(String filePath) throws IOException {
        // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ try-with-resources –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        try (InputStream configFile = new FileInputStream(filePath);
             JsonReader reader = Json.createReader(configFile)) {
            return reader.readObject();
        }
    }

    private static void handleRequestsForUsers(JsonArray usersArray, JsonObject config, String requestType,
                                                String name, String maxTime, String requestBody,
                                                JsonNumber timeout, ExecutorService executorService) {
        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        for (int j = 0; j < usersArray.size(); j++) {
            JsonObject userObject = usersArray.getJsonObject(j);
            String user = userObject.getString("user");
            String role = userObject.getString("role");
            String password = userObject.getString("password");

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            executorService.submit(new HttpsRequest(
                user, requestType, config.getString("url"), name, maxTime,
                requestBody, password, role
            ));
        }
    }

    private static void shutdownExecutor(ExecutorService executorService) {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É ExecutorService
        executorService.shutdown();
        try {
            if (!executorService.awaitTermination(60, TimeUnit.SECONDS)) {
                executorService.shutdownNow();
                if (!executorService.awaitTermination(60, TimeUnit.SECONDS)) {
                    System.err.println("Executor did not terminate in time");
                }
            }
        } catch (InterruptedException e) {
            executorService.shutdownNow();
            Thread.currentThread().interrupt();
        }
    }
}
