package loader;

import java.time.LocalDateTime;
import java.time.Duration;
import java.time.format.DateTimeFormatter;
import java.io.StringReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonNumber;

import org.eclipse.jetty.util.log.Log;
import org.eclipse.jetty.util.log.Logger;
import org.eclipse.jetty.websocket.api.Session;
import org.eclipse.jetty.websocket.api.annotations.OnWebSocketClose;
import org.eclipse.jetty.websocket.api.annotations.OnWebSocketConnect;
import org.eclipse.jetty.websocket.api.annotations.OnWebSocketError;
import org.eclipse.jetty.websocket.api.annotations.OnWebSocketMessage;
import org.eclipse.jetty.websocket.api.annotations.WebSocket;
import org.eclipse.jetty.websocket.client.WebSocketClient;
import org.eclipse.jetty.client.HttpClient;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;

import java.util.UUID;

@WebSocket
public class SocketRequest {
    private final String name;
    private final LocalDateTime startTime;
    private final String threadNumber;
    private final String urlArm;
    private final String requestName;
    private final String maxTime;
    private final HttpClient httpClient;
    private final WebSocketClient client;

    static final Logger LOG = Log.getLogger(SocketRequest.class);
    private static final ObjectMapper objectMapper = new ObjectMapper();
    private static final ArrayNode logs = objectMapper.createArrayNode();  // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤

    public SocketRequest(String name, LocalDateTime startTime, String threadNumber, 
                         String urlArm, String requestName, String maxTime,
                         HttpClient httpClient, WebSocketClient client) {
        this.name = name; 
        this.startTime = startTime;
        this.threadNumber = threadNumber;
        this.urlArm = urlArm;
        this.requestName = requestName;
        this.maxTime = maxTime;
        this.httpClient = httpClient;
        this.client = client;
    }

    @OnWebSocketConnect
    public void onConnect(Session sess) {
        LOG.info("üîó onConnect üîó user = {}", this.name);
        logToFile("onConnect", "User connected: " + this.name);
    }

    @OnWebSocketClose
    public void onClose(int statusCode, String reason) {
        LOG.info("üîê onClose üîê thread = {}; user = {}; statusCode = {}; reason = {}", 
                  threadNumber, this.name, statusCode, reason);
        logToFile("onClose", "Connection closed: " + reason);
    }

    @OnWebSocketError
    public void onError(Throwable cause) {
        LOG.warn("WebSocket error: {}", cause.getMessage(), cause);
        logToFile("onError", "Error occurred: " + cause.getMessage());
    }

    @OnWebSocketMessage
    public void onMessage(String msg) {
        UUID uuid = UUID.randomUUID();
        String uuidString = uuid.toString();

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON —Å–æ–æ–±—â–µ–Ω–∏–µ
        JsonObject obj = Json.createReader(new StringReader(msg)).readObject();
        String requestType = obj.getString("request_type");
        JsonNumber status = obj.getJsonNumber("status");
        LOG.info("üì§ [–û–¢–í–ï–¢] üì§ thread = {}; user = {}; request = {}; status = {};", 
                  threadNumber, this.name, requestType, status);
        logToFile("onMessage", "Message received: " + msg);

        LocalDateTime endTime = LocalDateTime.now();
        Duration diff = Duration.between(startTime, endTime);

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy.MM.dd HH:mm:ss SSS");
        String resultTime = String.format("%02d", diff.toMillisPart());  // –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        String startTimeString = startTime.format(formatter);
        String endTimeString = endTime.format(formatter);

        LOG.info("üß≠ [TIME END] thread = {}; user = {}; request = {}; END = {}", 
                  threadNumber, this.name, requestType, endTimeString);
        LOG.info("‚åöÔ∏è [TIME] thread = {}; user = {}; request = {}; TIME = {}", 
                  threadNumber, this.name, requestType, resultTime);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ XML
        MetricXml metricXml = new MetricXml(this.name, requestType, resultTime, this.urlArm, requestName, maxTime);
        try {
            metricXml.saveXml();
        } catch (Exception e) {
            LOG.warn("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è XML: {}", e.getMessage());
            logToFile("saveXml", "XML save error: " + e.getMessage());
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket –∏ HttpClient —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π
        try {
            if (httpClient != null) {
                httpClient.stop();
            }
            if (client != null) {
                client.stop();
            }
        } catch (Exception e) {
            LOG.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–ª–∏–µ–Ω—Ç–æ–≤: {}", e.getMessage());
            logToFile("clientStop", "Client stop error: " + e.getMessage());
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
    private void logToFile(String event, String message) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy.MM.dd HH:mm:ss");
        LocalDateTime now = LocalDateTime.now();
        String timestamp = now.format(formatter);

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ª–æ–≥–∞
        ObjectNode logEntry = objectMapper.createObjectNode();
        logEntry.put("timestamp", timestamp);
        logEntry.put("thread", threadNumber);
        logEntry.put("event", event);
        logEntry.put("message", message);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ –ª–æ–≥–æ–≤
        logs.add(logEntry);

        // –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        try (FileWriter writer = new FileWriter("./report/log/log.json", false)) {
            // –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–µ—Å—å –º–∞—Å—Å–∏–≤ JSON
            writer.write(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(logs));
        } catch (IOException e) {
            LOG.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª –ª–æ–≥–æ–≤: {}", e.getMessage());
        }
    }
}
